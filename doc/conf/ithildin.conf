// $Id: ithildin.conf 578 2005-08-21 06:37:53Z wd $

/*
** this file is typically a wrapper for your other configuration files, such
** as ircd.conf, modules.conf, etc.  Here I have included 'modules.conf',
** 'ircd.conf', and 'acl.conf'.  Other modules might require other files
** (such as http.conf).  Individual configuration files will be passed out
** with individual modules.
*/

// the 'maxsockets' setting specifies the maximum number of sockets that can
// be allocated.  this 'can' be set above what your system's limit is, but
// it won't do you any good.  by default set it to 1024
maxsockets 256;

// the 'username' setting specifies which user the daemon should try to run
// as.  this only applies when it is started with an effective uid of 0.
// the change is performed after all modules are initially loaded.
username nobody;

// the 'groups' setting specifies one or more groups the daemon should try
// to run in.  this only applies when it is started with an effective uid of
// 0.  the change is performed after all modules are initially loaded.  the
// groups should be specified as a space or comma separated list.
groups nogroup;

// the 'directory' setting will tell the daemon to switch to specific
// directory as soon as the configuration is read.
//directory "/tmp";

// the 'drop-privileges' setting tells the daemon to also drop its effective
// userid when changing usernames.  this is usually a good idea.
drop-privileges yes;

/*
** 'modules' section:
** typically this section consists of various options, followed by several
** 'module' subsections.  These are described below,  If you want to DO
** something you need to uncomment all the modules! :)
*/
modules {
    // no options yet

    /*** REMOVE THIS LINE (AND THE ONE LIKE IT BELOW) TO MAKE STUFF WORK ***

    module log { // define a module's information
        file "log.so"; // this is our module
        load "yes"; // load at boot-time (yes/no)
    };

    module dns {
        file "dns.so"; // non-blocking dns module
        load "no"; // will be loaded if necessary.
        data {
            $INCLUDE "dns.conf";
        };
    };
    module ircd {
        file "ircd.so";
        load "yes";
        export "yes"; // force symbol export.
        data {
            $INCLUDE "ircd/ircd.conf";
        };
    };

    *** REMOVE THIS LINE AS WELL AS THE ONE LIKE IT ABOVE ***/
};

// The 'ssl' section is used to configure the interoperation between
// ithildin and the OpenSSL library.  If OpenSSL support is not compiled in
// the section will be totally ignored.  If the section is not present at
// server startup time then SSL support is turned off.  You must uncomment
// this section to use SSL, don't forget to fill in the values correctly!
/* REMOVE THIS LINE AND THE ONE BELOW TO USE SSL
ssl {
    // this is the file to get entropy from.  if your system doesn't have
    // random devices, you can manually generate an entropy file and use
    // that instead.  be warned, however, that a hand-generated entropy file
    // is not a good source of PRNG seed data.  it is recommended that you
    // use the EGD system instead.  if the 'entropy' setting begins with the
    // special string "egd:" it will use the EGD seeding method.  For
    // example if your EGD socket is /tmp/egd-socket you would use a setting
    // of "egd:/tmp/egd-socket"
    entropy "/dev/random";
    // The number of bits to seed the PRNG with.  Values less than 512 will
    // yield poor encryption.
    entropy-bits 2048;
    
    // The certificate file (PEM format) that you wish to use.  If the full
    // path is not specified it is assumed to be in the root configuration
    // directory.
    certificate-file "your-cert-file";
    // The key file (PEM format) that you wish to use.  This must be
    // specified, even if the private key is in the certificate file!
    key-file "your-key-file";
    // The certificate authority (CA) file to use.  This is optional.
    //ca-file "your-ca-file";

    // This toggles certificate verification.  It is not recommended that
    // you turn this off.  It tends to be a really bad idea.  If you do so
    // your links may be encrypted but *they will not be secure!*  Use this
    // at your own risk;
    verify-certificates yes;

    // This is the timeout for SSL handshakes.  The default is very
    // reasonable, as SSL handshakes do not send much data over the wire
    // under normal circumstances.
    handshake-timeout 30s;
};
REMOVE THIS LINE AND THE ONE ABOVE TO USE SSL */

